datasource db {
  provider = "mongodb"
  url      = "mongodb://localhost:27017/mydatabase"
}

generator client {
  provider = "prisma-client-js"
}

// Abstract base model for shared properties
model ComponentBase {
  id                    String        @id @default(uuid()) @map("_id")
  name                  String
  manufacturer          String
  price                 Int
  image_placeholder_url String
  image_url             String
  Component             Component[]
  GPU                   GPU[]
  CPU                   CPU[]
  Motherboard           Motherboard[]
  Case                  Case[]
  PSU                   PSU[]
  SSD                   SSD[]
  RAM                   RAM[]
  CPUFan                CPUFan[]
  Monitor               Monitor[]
}

model Build {
  id             String      @id @default(uuid()) @map("_id")
  step           Int
  component_list Component[]
  User           User?       @relation(fields: [userId], references: [id])
  userId         String?
}

model Component {
  id              String        @id @default(uuid()) @map("_id")
  componentBase   ComponentBase @relation(fields: [componentBaseId], references: [id])
  Build           Build?        @relation(fields: [buildId], references: [id])
  buildId         String?
  componentBaseId String
}

model User {
  id         String   @id @default(uuid()) @map("_id")
  email      String
  type       String // ENUM values can be defined as an enum type in Prisma
  password   String
  builds     Build[] // Builds associated with the user
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model GPU {
  id                String        @id @default(uuid()) @map("_id")
  component         ComponentBase @relation(fields: [componentBaseId], references: [id])
  clock             Int
  boost_clock       Int
  memory            Int
  length            Int
  color             String
  model             String
  manufacturer_code String
  componentBaseId   String
}

model CPU {
  id                  String        @id @default(uuid()) @map("_id")
  component           ComponentBase @relation(fields: [componentBaseId], references: [id])
  core_count          Int
  core_clock          Int
  boost_clock         Int
  tdp                 Int
  integrated_graphics String
  smt                 EnumSMT
  componentBaseId     String
}

model Motherboard {
  id              String        @id @default(uuid()) @map("_id")
  component       ComponentBase @relation(fields: [componentBaseId], references: [id])
  socket          String
  form_factor     String
  max_memory      Int
  memory_slots    Int
  color           String
  // Additional fields specific to motherboard
  componentBaseId String
}

model Case {
  id                String        @id @default(uuid()) @map("_id")
  component         ComponentBase @relation(fields: [componentBaseId], references: [id])
  type              String
  power_supply      String
  side_panel_window String
  internal_35_bays  Int
  external_525_bays Int
  componentBaseId   String
}

model PSU {
  id                String        @id @default(uuid()) @map("_id")
  component         ComponentBase @relation(fields: [componentBaseId], references: [id])
  type              String
  efficiency_rating String
  wattage           Int
  modular           String
  color             String
  componentBaseId   String
}

model SSD {
  id              String        @id @default(uuid()) @map("_id")
  component       ComponentBase @relation(fields: [componentBaseId], references: [id])
  capacity        Int
  price_per_gb    Int
  type            String
  cache           Int
  form_factor     String
  interface       String
  componentBaseId String
}

model RAM {
  id                 String        @id @default(uuid()) @map("_id")
  component          ComponentBase @relation(fields: [componentBaseId], references: [id])
  speed              Int
  modules            String
  price_per_gb       Int
  color              String
  first_word_latency String
  cas_latency        String
  componentBaseId    String
}

model CPUFan {
  id              String        @id @default(uuid()) @map("_id")
  component       ComponentBase @relation(fields: [componentBaseId], references: [id])
  fan_rpm         String
  noise_level     String
  color           String
  radiator_size   String
  componentBaseId String
}

model Monitor {
  id              String        @id @default(uuid()) @map("_id")
  component       ComponentBase @relation(fields: [componentBaseId], references: [id])
  screen_size     String
  resolution      String
  refresh_rate    String
  response_time   String
  panel_type      String
  aspect_ratio    String
  componentBaseId String
}

enum EnumSMT {
  YES
  NO
}
